//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ControllerManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ControllerManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ControllerManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ControllerManager() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ControllerManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ControllerManager() : this(OgrePINVOKE.new_ControllerManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ControllerReal createController(ControllerValueRealPtr src, ControllerValueRealPtr dest, ControllerFunctionPtr func) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createController(swigCPtr, ControllerValueRealPtr.getCPtr(src), ControllerValueRealPtr.getCPtr(dest), ControllerFunctionPtr.getCPtr(func));
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createFrameTimePassthroughController(ControllerValueRealPtr dest) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createFrameTimePassthroughController(swigCPtr, ControllerValueRealPtr.getCPtr(dest));
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearControllers() {
    OgrePINVOKE.ControllerManager_clearControllers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void updateAllControllers() {
    OgrePINVOKE.ControllerManager_updateAllControllers(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ControllerValueRealPtr getFrameTimeSource() {
    ControllerValueRealPtr ret = new ControllerValueRealPtr(OgrePINVOKE.ControllerManager_getFrameTimeSource(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerFunctionPtr getPassthroughControllerFunction() {
    ControllerFunctionPtr ret = new ControllerFunctionPtr(OgrePINVOKE.ControllerManager_getPassthroughControllerFunction(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureAnimator(TextureUnitState layer, float sequenceTime) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureAnimator(swigCPtr, TextureUnitState.getCPtr(layer), sequenceTime);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureUVScroller(TextureUnitState layer, float speed) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureUVScroller(swigCPtr, TextureUnitState.getCPtr(layer), speed);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureUScroller(TextureUnitState layer, float uSpeed) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureUScroller(swigCPtr, TextureUnitState.getCPtr(layer), uSpeed);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureVScroller(TextureUnitState layer, float vSpeed) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureVScroller(swigCPtr, TextureUnitState.getCPtr(layer), vSpeed);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureRotater(TextureUnitState layer, float speed) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureRotater(swigCPtr, TextureUnitState.getCPtr(layer), speed);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureWaveTransformer(TextureUnitState layer, TextureUnitState.TextureTransformType ttype, WaveformType waveType, float arg3, float frequency, float phase, float amplitude) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureWaveTransformer__SWIG_0(swigCPtr, TextureUnitState.getCPtr(layer), (int)ttype, (int)waveType, arg3, frequency, phase, amplitude);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureWaveTransformer(TextureUnitState layer, TextureUnitState.TextureTransformType ttype, WaveformType waveType, float arg3, float frequency, float phase) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureWaveTransformer__SWIG_1(swigCPtr, TextureUnitState.getCPtr(layer), (int)ttype, (int)waveType, arg3, frequency, phase);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureWaveTransformer(TextureUnitState layer, TextureUnitState.TextureTransformType ttype, WaveformType waveType, float arg3, float frequency) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureWaveTransformer__SWIG_2(swigCPtr, TextureUnitState.getCPtr(layer), (int)ttype, (int)waveType, arg3, frequency);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureWaveTransformer(TextureUnitState layer, TextureUnitState.TextureTransformType ttype, WaveformType waveType, float arg3) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureWaveTransformer__SWIG_3(swigCPtr, TextureUnitState.getCPtr(layer), (int)ttype, (int)waveType, arg3);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createTextureWaveTransformer(TextureUnitState layer, TextureUnitState.TextureTransformType ttype, WaveformType waveType) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createTextureWaveTransformer__SWIG_4(swigCPtr, TextureUnitState.getCPtr(layer), (int)ttype, (int)waveType);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createGpuProgramTimerParam(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t arg0, uint paramIndex, float timeFactor) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createGpuProgramTimerParam__SWIG_0(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t.getCPtr(arg0), paramIndex, timeFactor);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ControllerReal createGpuProgramTimerParam(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t arg0, uint paramIndex) {
    global::System.IntPtr cPtr = OgrePINVOKE.ControllerManager_createGpuProgramTimerParam__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t.getCPtr(arg0), paramIndex);
    ControllerReal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ControllerReal(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroyController(ControllerReal controller) {
    OgrePINVOKE.ControllerManager_destroyController(swigCPtr, ControllerReal.getCPtr(controller));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTimeFactor() {
    float ret = OgrePINVOKE.ControllerManager_getTimeFactor(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTimeFactor(float tf) {
    OgrePINVOKE.ControllerManager_setTimeFactor(swigCPtr, tf);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getFrameDelay() {
    float ret = OgrePINVOKE.ControllerManager_getFrameDelay(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setFrameDelay(float fd) {
    OgrePINVOKE.ControllerManager_setFrameDelay(swigCPtr, fd);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public float getElapsedTime() {
    float ret = OgrePINVOKE.ControllerManager_getElapsedTime(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setElapsedTime(float elapsedTime) {
    OgrePINVOKE.ControllerManager_setElapsedTime(swigCPtr, elapsedTime);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ControllerManager getSingleton() {
    ControllerManager ret = new ControllerManager(OgrePINVOKE.ControllerManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
