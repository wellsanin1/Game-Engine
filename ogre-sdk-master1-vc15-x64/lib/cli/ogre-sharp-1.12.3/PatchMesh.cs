//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PatchMesh : Mesh {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PatchMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.PatchMesh_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PatchMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PatchMesh() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PatchMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public PatchMesh(ResourceManager creator, string name, ulong handle, string group) : this(OgrePINVOKE.new_PatchMesh(ResourceManager.getCPtr(creator), name, handle, group), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void update(SWIGTYPE_p_void controlPointBuffer, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgrePINVOKE.PatchMesh_update(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage, bool vbUseShadow, bool ibUseShadow) {
    OgrePINVOKE.PatchMesh_define__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, (int)vbUsage, (int)ibUsage, vbUseShadow, ibUseShadow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage, bool vbUseShadow) {
    OgrePINVOKE.PatchMesh_define__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, (int)vbUsage, (int)ibUsage, vbUseShadow);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage, HardwareBuffer.Usage ibUsage) {
    OgrePINVOKE.PatchMesh_define__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, (int)vbUsage, (int)ibUsage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide, HardwareBuffer.Usage vbUsage) {
    OgrePINVOKE.PatchMesh_define__SWIG_3(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide, (int)vbUsage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel, PatchSurface.VisibleSide visibleSide) {
    OgrePINVOKE.PatchMesh_define__SWIG_4(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel, (int)visibleSide);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel, uint vMaxSubdivisionLevel) {
    OgrePINVOKE.PatchMesh_define__SWIG_5(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel, vMaxSubdivisionLevel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height, uint uMaxSubdivisionLevel) {
    OgrePINVOKE.PatchMesh_define__SWIG_6(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height, uMaxSubdivisionLevel);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void define(SWIGTYPE_p_void controlPointBuffer, VertexDeclaration declaration, uint width, uint height) {
    OgrePINVOKE.PatchMesh_define__SWIG_7(swigCPtr, SWIGTYPE_p_void.getCPtr(controlPointBuffer), VertexDeclaration.getCPtr(declaration), width, height);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setSubdivision(float factor) {
    OgrePINVOKE.PatchMesh_setSubdivision(swigCPtr, factor);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
