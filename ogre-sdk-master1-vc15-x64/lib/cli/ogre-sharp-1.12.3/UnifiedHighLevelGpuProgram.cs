//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class UnifiedHighLevelGpuProgram : HighLevelGpuProgram {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UnifiedHighLevelGpuProgram(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.UnifiedHighLevelGpuProgram_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UnifiedHighLevelGpuProgram obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UnifiedHighLevelGpuProgram() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_UnifiedHighLevelGpuProgram(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static void setPriority(string shaderLanguage, int priority) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_setPriority(shaderLanguage, priority);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int getPriority(string shaderLanguage) {
    int ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getPriority(shaderLanguage);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public UnifiedHighLevelGpuProgram(ResourceManager creator, string name, ulong handle, string group, bool isManual, ManualResourceLoader loader) : this(OgrePINVOKE.new_UnifiedHighLevelGpuProgram__SWIG_0(ResourceManager.getCPtr(creator), name, handle, group, isManual, ManualResourceLoader.getCPtr(loader)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public UnifiedHighLevelGpuProgram(ResourceManager creator, string name, ulong handle, string group, bool isManual) : this(OgrePINVOKE.new_UnifiedHighLevelGpuProgram__SWIG_1(ResourceManager.getCPtr(creator), name, handle, group, isManual), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public UnifiedHighLevelGpuProgram(ResourceManager creator, string name, ulong handle, string group) : this(OgrePINVOKE.new_UnifiedHighLevelGpuProgram__SWIG_2(ResourceManager.getCPtr(creator), name, handle, group), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint calculateSize() {
    uint ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_calculateSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addDelegateProgram(string name) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_addDelegateProgram(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearDelegatePrograms() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_clearDelegatePrograms(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public HighLevelGpuProgramPtr _getDelegate() {
    HighLevelGpuProgramPtr ret = new HighLevelGpuProgramPtr(OgrePINVOKE.UnifiedHighLevelGpuProgram__getDelegate(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string getLanguage() {
    string ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getLanguage(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t createParameters() {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t(OgrePINVOKE.UnifiedHighLevelGpuProgram_createParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override GpuProgram _getBindingDelegate() {
    global::System.IntPtr cPtr = OgrePINVOKE.UnifiedHighLevelGpuProgram__getBindingDelegate(swigCPtr);
    GpuProgram ret = (cPtr == global::System.IntPtr.Zero) ? null : new GpuProgram(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSupported() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isSupported(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isSkeletalAnimationIncluded() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isSkeletalAnimationIncluded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isMorphAnimationIncluded() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isMorphAnimationIncluded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isPoseAnimationIncluded() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isPoseAnimationIncluded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ushort getNumberOfPosesIncluded() {
    ushort ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getNumberOfPosesIncluded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isVertexTextureFetchRequired() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isVertexTextureFetchRequired(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t getDefaultParameters() {
    SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__GpuProgramParameters_t(OgrePINVOKE.UnifiedHighLevelGpuProgram_getDefaultParameters(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasDefaultParameters() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_hasDefaultParameters(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getPassSurfaceAndLightStates() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getPassSurfaceAndLightStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getPassFogStates() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getPassFogStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool getPassTransformStates() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getPassTransformStates(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool hasCompileError() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_hasCompileError(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void resetCompileError() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_resetCompileError(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void load(bool backgroundThread) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_load__SWIG_0(swigCPtr, backgroundThread);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void load() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_load__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void reload(Resource.LoadingFlags flags) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_reload__SWIG_0(swigCPtr, (int)flags);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void reload() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_reload__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isReloadable() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isReloadable(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isLoaded() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isLoading() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Resource.LoadingState getLoadingState() {
    Resource.LoadingState ret = (Resource.LoadingState)OgrePINVOKE.UnifiedHighLevelGpuProgram_getLoadingState(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void unload() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_unload(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint getSize() {
    uint ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_getSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void touch() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_touch(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isBackgroundLoaded() {
    bool ret = OgrePINVOKE.UnifiedHighLevelGpuProgram_isBackgroundLoaded(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void setBackgroundLoaded(bool bl) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_setBackgroundLoaded(swigCPtr, bl);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void escalateLoading() {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_escalateLoading(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void addListener(Resource.Listener lis) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_addListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void removeListener(Resource.Listener lis) {
    OgrePINVOKE.UnifiedHighLevelGpuProgram_removeListener(swigCPtr, Resource.Listener.getCPtr(lis));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
