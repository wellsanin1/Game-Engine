//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class LinearControllerFunction : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LinearControllerFunction(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LinearControllerFunction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LinearControllerFunction() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_LinearControllerFunction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public LinearControllerFunction(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values, float frequency, bool deltaInput) : this(OgrePINVOKE.new_LinearControllerFunction__SWIG_0(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values), frequency, deltaInput), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearControllerFunction(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values, float frequency) : this(OgrePINVOKE.new_LinearControllerFunction__SWIG_1(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values), frequency), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public LinearControllerFunction(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values) : this(OgrePINVOKE.new_LinearControllerFunction__SWIG_2(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ControllerFunctionPtr create(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values, float frequency, bool deltaInput) {
    ControllerFunctionPtr ret = new ControllerFunctionPtr(OgrePINVOKE.LinearControllerFunction_create__SWIG_0(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values), frequency, deltaInput), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ControllerFunctionPtr create(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values, float frequency) {
    ControllerFunctionPtr ret = new ControllerFunctionPtr(OgrePINVOKE.LinearControllerFunction_create__SWIG_1(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values), frequency), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ControllerFunctionPtr create(SWIGTYPE_p_std__vectorT_float_t keys, SWIGTYPE_p_std__vectorT_float_t values) {
    ControllerFunctionPtr ret = new ControllerFunctionPtr(OgrePINVOKE.LinearControllerFunction_create__SWIG_2(SWIGTYPE_p_std__vectorT_float_t.getCPtr(keys), SWIGTYPE_p_std__vectorT_float_t.getCPtr(values)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float calculate(float source) {
    float ret = OgrePINVOKE.LinearControllerFunction_calculate(swigCPtr, source);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
