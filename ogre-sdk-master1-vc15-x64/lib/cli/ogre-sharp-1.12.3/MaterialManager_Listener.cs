//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MaterialManager_Listener : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MaterialManager_Listener(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialManager_Listener obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MaterialManager_Listener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MaterialManager_Listener(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual Technique handleSchemeNotFound(ushort schemeIndex, string schemeName, Material originalMaterial, ushort lodIndex, Renderable rend) {
    global::System.IntPtr cPtr = OgrePINVOKE.MaterialManager_Listener_handleSchemeNotFound(swigCPtr, schemeIndex, schemeName, Material.getCPtr(originalMaterial), lodIndex, Renderable.getCPtr(rend));
    Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool afterIlluminationPassesCreated(Technique technique) {
    bool ret = (SwigDerivedClassHasMethod("afterIlluminationPassesCreated", swigMethodTypes1) ? OgrePINVOKE.MaterialManager_Listener_afterIlluminationPassesCreatedSwigExplicitMaterialManager_Listener(swigCPtr, Technique.getCPtr(technique)) : OgrePINVOKE.MaterialManager_Listener_afterIlluminationPassesCreated(swigCPtr, Technique.getCPtr(technique)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool beforeIlluminationPassesCleared(Technique technique) {
    bool ret = (SwigDerivedClassHasMethod("beforeIlluminationPassesCleared", swigMethodTypes2) ? OgrePINVOKE.MaterialManager_Listener_beforeIlluminationPassesClearedSwigExplicitMaterialManager_Listener(swigCPtr, Technique.getCPtr(technique)) : OgrePINVOKE.MaterialManager_Listener_beforeIlluminationPassesCleared(swigCPtr, Technique.getCPtr(technique)));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialManager_Listener() : this(OgrePINVOKE.new_MaterialManager_Listener(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("handleSchemeNotFound", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMaterialManager_Listener_0(SwigDirectorhandleSchemeNotFound);
    if (SwigDerivedClassHasMethod("afterIlluminationPassesCreated", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMaterialManager_Listener_1(SwigDirectorafterIlluminationPassesCreated);
    if (SwigDerivedClassHasMethod("beforeIlluminationPassesCleared", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMaterialManager_Listener_2(SwigDirectorbeforeIlluminationPassesCleared);
    OgrePINVOKE.MaterialManager_Listener_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MaterialManager_Listener));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorhandleSchemeNotFound(ushort schemeIndex, string schemeName, global::System.IntPtr originalMaterial, ushort lodIndex, global::System.IntPtr rend) {
    return Technique.getCPtr(handleSchemeNotFound(schemeIndex, schemeName, (originalMaterial == global::System.IntPtr.Zero) ? null : new Material(originalMaterial, false), lodIndex, (rend == global::System.IntPtr.Zero) ? null : new Renderable(rend, false))).Handle;
  }

  private bool SwigDirectorafterIlluminationPassesCreated(global::System.IntPtr technique) {
    return afterIlluminationPassesCreated((technique == global::System.IntPtr.Zero) ? null : new Technique(technique, false));
  }

  private bool SwigDirectorbeforeIlluminationPassesCleared(global::System.IntPtr technique) {
    return beforeIlluminationPassesCleared((technique == global::System.IntPtr.Zero) ? null : new Technique(technique, false));
  }

  public delegate global::System.IntPtr SwigDelegateMaterialManager_Listener_0(ushort schemeIndex, string schemeName, global::System.IntPtr originalMaterial, ushort lodIndex, global::System.IntPtr rend);
  public delegate bool SwigDelegateMaterialManager_Listener_1(global::System.IntPtr technique);
  public delegate bool SwigDelegateMaterialManager_Listener_2(global::System.IntPtr technique);

  private SwigDelegateMaterialManager_Listener_0 swigDelegate0;
  private SwigDelegateMaterialManager_Listener_1 swigDelegate1;
  private SwigDelegateMaterialManager_Listener_2 swigDelegate2;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ushort), typeof(string), typeof(Material), typeof(ushort), typeof(Renderable) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(Technique) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(Technique) };
}

}
