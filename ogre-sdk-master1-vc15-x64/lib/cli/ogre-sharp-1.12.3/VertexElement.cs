//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class VertexElement : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal VertexElement(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(VertexElement obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~VertexElement() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_VertexElement(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public VertexElement() : this(OgrePINVOKE.new_VertexElement__SWIG_0(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexElement(ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic, ushort index) : this(OgrePINVOKE.new_VertexElement__SWIG_1(source, offset, (int)theType, (int)semantic, index), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public VertexElement(ushort source, uint offset, VertexElementType theType, VertexElementSemantic semantic) : this(OgrePINVOKE.new_VertexElement__SWIG_2(source, offset, (int)theType, (int)semantic), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getSource() {
    ushort ret = OgrePINVOKE.VertexElement_getSource(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getOffset() {
    uint ret = OgrePINVOKE.VertexElement_getOffset(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElementType getType() {
    VertexElementType ret = (VertexElementType)OgrePINVOKE.VertexElement_getType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexElementSemantic getSemantic() {
    VertexElementSemantic ret = (VertexElementSemantic)OgrePINVOKE.VertexElement_getSemantic(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getIndex() {
    ushort ret = OgrePINVOKE.VertexElement_getIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getSize() {
    uint ret = OgrePINVOKE.VertexElement_getSize(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint getTypeSize(VertexElementType etype) {
    uint ret = OgrePINVOKE.VertexElement_getTypeSize((int)etype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ushort getTypeCount(VertexElementType etype) {
    ushort ret = OgrePINVOKE.VertexElement_getTypeCount((int)etype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VertexElementType multiplyTypeCount(VertexElementType baseType, ushort count) {
    VertexElementType ret = (VertexElementType)OgrePINVOKE.VertexElement_multiplyTypeCount((int)baseType, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VertexElementType getBaseType(VertexElementType multiType) {
    VertexElementType ret = (VertexElementType)OgrePINVOKE.VertexElement_getBaseType((int)multiType);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void convertColourValue(VertexElementType srcType, VertexElementType dstType, SWIGTYPE_p_unsigned_int ptr) {
    OgrePINVOKE.VertexElement_convertColourValue__SWIG_0((int)srcType, (int)dstType, SWIGTYPE_p_unsigned_int.getCPtr(ptr));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static uint convertColourValue(ColourValue src, VertexElementType dst) {
    uint ret = OgrePINVOKE.VertexElement_convertColourValue__SWIG_1(ColourValue.getCPtr(src), (int)dst);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static VertexElementType getBestColourVertexElementType() {
    VertexElementType ret = (VertexElementType)OgrePINVOKE.VertexElement_getBestColourVertexElementType();
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void baseVertexPointerToElement(SWIGTYPE_p_void pBase, SWIGTYPE_p_p_void pElem) {
    OgrePINVOKE.VertexElement_baseVertexPointerToElement__SWIG_0(swigCPtr, SWIGTYPE_p_void.getCPtr(pBase), SWIGTYPE_p_p_void.getCPtr(pElem));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void baseVertexPointerToElement(SWIGTYPE_p_void pBase, SWIGTYPE_p_p_float pElem) {
    OgrePINVOKE.VertexElement_baseVertexPointerToElement__SWIG_1(swigCPtr, SWIGTYPE_p_void.getCPtr(pBase), SWIGTYPE_p_p_float.getCPtr(pElem));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void baseVertexPointerToElement(SWIGTYPE_p_void pBase, SWIGTYPE_p_p_unsigned_int pElem) {
    OgrePINVOKE.VertexElement_baseVertexPointerToElement__SWIG_2(swigCPtr, SWIGTYPE_p_void.getCPtr(pBase), SWIGTYPE_p_p_unsigned_int.getCPtr(pElem));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void baseVertexPointerToElement(SWIGTYPE_p_void pBase, SWIGTYPE_p_p_unsigned_char pElem) {
    OgrePINVOKE.VertexElement_baseVertexPointerToElement__SWIG_3(swigCPtr, SWIGTYPE_p_void.getCPtr(pBase), SWIGTYPE_p_p_unsigned_char.getCPtr(pElem));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void baseVertexPointerToElement(SWIGTYPE_p_void pBase, SWIGTYPE_p_p_unsigned_short pElem) {
    OgrePINVOKE.VertexElement_baseVertexPointerToElement__SWIG_4(swigCPtr, SWIGTYPE_p_void.getCPtr(pBase), SWIGTYPE_p_p_unsigned_short.getCPtr(pElem));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
