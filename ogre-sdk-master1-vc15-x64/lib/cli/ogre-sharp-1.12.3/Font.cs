//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class Font : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal Font(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgreOverlayPINVOKE.Font_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Font obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Font() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          OgreOverlayPINVOKE.delete_Font(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class GlyphInfo : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal GlyphInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GlyphInfo obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~GlyphInfo() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            OgreOverlayPINVOKE.delete_Font_GlyphInfo(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint codePoint {
      set {
        OgreOverlayPINVOKE.Font_GlyphInfo_codePoint_set(swigCPtr, value);
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        uint ret = OgreOverlayPINVOKE.Font_GlyphInfo_codePoint_get(swigCPtr);
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public FloatRect uvRect {
      set {
        OgreOverlayPINVOKE.Font_GlyphInfo_uvRect_set(swigCPtr, FloatRect.getCPtr(value));
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        global::System.IntPtr cPtr = OgreOverlayPINVOKE.Font_GlyphInfo_uvRect_get(swigCPtr);
        FloatRect ret = (cPtr == global::System.IntPtr.Zero) ? null : new FloatRect(cPtr, false);
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public float aspectRatio {
      set {
        OgreOverlayPINVOKE.Font_GlyphInfo_aspectRatio_set(swigCPtr, value);
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        float ret = OgreOverlayPINVOKE.Font_GlyphInfo_aspectRatio_get(swigCPtr);
        if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public GlyphInfo(uint id, FloatRect rect, float aspect) : this(OgreOverlayPINVOKE.new_Font_GlyphInfo(id, FloatRect.getCPtr(rect), aspect), true) {
      if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    }
  
  }

  public Font(ResourceManager creator, string name, ulong handle, string group, bool isManual, ManualResourceLoader loader) : this(OgreOverlayPINVOKE.new_Font__SWIG_0(ResourceManager.getCPtr(creator), name, handle, group, isManual, ManualResourceLoader.getCPtr(loader)), true) {
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public Font(ResourceManager creator, string name, ulong handle, string group, bool isManual) : this(OgreOverlayPINVOKE.new_Font__SWIG_1(ResourceManager.getCPtr(creator), name, handle, group, isManual), true) {
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public Font(ResourceManager creator, string name, ulong handle, string group) : this(OgreOverlayPINVOKE.new_Font__SWIG_2(ResourceManager.getCPtr(creator), name, handle, group), true) {
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setType(FontType ftype) {
    OgreOverlayPINVOKE.Font_setType(swigCPtr, (int)ftype);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public FontType getType() {
    FontType ret = (FontType)OgreOverlayPINVOKE.Font_getType(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSource(string source) {
    OgreOverlayPINVOKE.Font_setSource(swigCPtr, source);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getSource() {
    string ret = OgreOverlayPINVOKE.Font_getSource(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setCharacterSpacer(uint charSpacer) {
    OgreOverlayPINVOKE.Font_setCharacterSpacer(swigCPtr, charSpacer);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getCharacterSpacer() {
    uint ret = OgreOverlayPINVOKE.Font_getCharacterSpacer(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setTrueTypeSize(float ttfSize) {
    OgreOverlayPINVOKE.Font_setTrueTypeSize(swigCPtr, ttfSize);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTrueTypeResolution(uint ttfResolution) {
    OgreOverlayPINVOKE.Font_setTrueTypeResolution(swigCPtr, ttfResolution);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getTrueTypeSize() {
    float ret = OgreOverlayPINVOKE.Font_getTrueTypeSize(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTrueTypeResolution() {
    uint ret = OgreOverlayPINVOKE.Font_getTrueTypeResolution(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getTrueTypeMaxBearingY() {
    int ret = OgreOverlayPINVOKE.Font_getTrueTypeMaxBearingY(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FloatRect getGlyphTexCoords(uint id) {
    FloatRect ret = new FloatRect(OgreOverlayPINVOKE.Font_getGlyphTexCoords(swigCPtr, id), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlyphTexCoords(uint id, float u1, float v1, float u2, float v2, float textureAspect) {
    OgreOverlayPINVOKE.Font_setGlyphTexCoords(swigCPtr, id, u1, v1, u2, v2, textureAspect);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public float getGlyphAspectRatio(uint id) {
    float ret = OgreOverlayPINVOKE.Font_getGlyphAspectRatio(swigCPtr, id);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGlyphAspectRatio(uint id, float ratio) {
    OgreOverlayPINVOKE.Font_setGlyphAspectRatio(swigCPtr, id, ratio);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public Font.GlyphInfo getGlyphInfo(uint id) {
    Font.GlyphInfo ret = new Font.GlyphInfo(OgreOverlayPINVOKE.Font_getGlyphInfo(swigCPtr, id), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addCodePointRange(SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t range) {
    OgreOverlayPINVOKE.Font_addCodePointRange(swigCPtr, SWIGTYPE_p_std__pairT_unsigned_int_unsigned_int_t.getCPtr(range));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearCodePointRanges() {
    OgreOverlayPINVOKE.Font_clearCodePointRanges(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t getCodePointRangeList() {
    SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t ret = new SWIGTYPE_p_std__vectorT_std__pairT_unsigned_int_unsigned_int_t_t(OgreOverlayPINVOKE.Font_getCodePointRangeList(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgreOverlayPINVOKE.Font_getMaterial__SWIG_0(swigCPtr), false);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setAntialiasColour(bool enabled) {
    OgreOverlayPINVOKE.Font_setAntialiasColour(swigCPtr, enabled);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getAntialiasColour() {
    bool ret = OgreOverlayPINVOKE.Font_getAntialiasColour(swigCPtr);
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void loadResource(Resource resource) {
    OgreOverlayPINVOKE.Font_loadResource(swigCPtr, Resource.getCPtr(resource));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void _setMaterial(MaterialPtr mat) {
    OgreOverlayPINVOKE.Font__setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgreOverlayPINVOKE.SWIGPendingException.Pending) throw OgreOverlayPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
