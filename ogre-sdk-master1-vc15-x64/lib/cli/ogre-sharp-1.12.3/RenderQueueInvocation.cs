//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class RenderQueueInvocation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RenderQueueInvocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RenderQueueInvocation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RenderQueueInvocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_RenderQueueInvocation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RenderQueueInvocation(byte renderQueueGroupID, string invocationName) : this(OgrePINVOKE.new_RenderQueueInvocation__SWIG_0(renderQueueGroupID, invocationName), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public RenderQueueInvocation(byte renderQueueGroupID) : this(OgrePINVOKE.new_RenderQueueInvocation__SWIG_1(renderQueueGroupID), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual byte getRenderQueueGroupID() {
    byte ret = OgrePINVOKE.RenderQueueInvocation_getRenderQueueGroupID(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getInvocationName() {
    string ret = OgrePINVOKE.RenderQueueInvocation_getInvocationName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSolidsOrganisation(QueuedRenderableCollection.OrganisationMode org) {
    OgrePINVOKE.RenderQueueInvocation_setSolidsOrganisation(swigCPtr, (int)org);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual QueuedRenderableCollection.OrganisationMode getSolidsOrganisation() {
    QueuedRenderableCollection.OrganisationMode ret = (QueuedRenderableCollection.OrganisationMode)OgrePINVOKE.RenderQueueInvocation_getSolidsOrganisation(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSuppressShadows(bool suppress) {
    OgrePINVOKE.RenderQueueInvocation_setSuppressShadows(swigCPtr, suppress);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getSuppressShadows() {
    bool ret = OgrePINVOKE.RenderQueueInvocation_getSuppressShadows(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setSuppressRenderStateChanges(bool suppress) {
    OgrePINVOKE.RenderQueueInvocation_setSuppressRenderStateChanges(swigCPtr, suppress);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool getSuppressRenderStateChanges() {
    bool ret = OgrePINVOKE.RenderQueueInvocation_getSuppressRenderStateChanges(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void invoke(RenderQueueGroup group, SceneManager targetSceneManager) {
    OgrePINVOKE.RenderQueueInvocation_invoke(swigCPtr, RenderQueueGroup.getCPtr(group), SceneManager.getCPtr(targetSceneManager));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string RENDER_QUEUE_INVOCATION_SHADOWS {
    set {
      OgrePINVOKE.RenderQueueInvocation_RENDER_QUEUE_INVOCATION_SHADOWS_set(value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.RenderQueueInvocation_RENDER_QUEUE_INVOCATION_SHADOWS_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
