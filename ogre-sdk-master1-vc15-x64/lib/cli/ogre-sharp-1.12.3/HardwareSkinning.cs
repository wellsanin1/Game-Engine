//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class HardwareSkinning : SubRenderState {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal HardwareSkinning(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RTShaderPINVOKE.HardwareSkinning_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HardwareSkinning obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HardwareSkinning() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderPINVOKE.delete_HardwareSkinning(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public class SkinningData : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SkinningData(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SkinningData obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SkinningData() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            RTShaderPINVOKE.delete_HardwareSkinning_SkinningData(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public SkinningData() : this(RTShaderPINVOKE.new_HardwareSkinning_SkinningData(), true) {
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    }
  
    public bool isValid {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_isValid_set(swigCPtr, value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = RTShaderPINVOKE.HardwareSkinning_SkinningData_isValid_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort maxBoneCount {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_maxBoneCount_set(swigCPtr, value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = RTShaderPINVOKE.HardwareSkinning_SkinningData_maxBoneCount_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ushort maxWeightCount {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_maxWeightCount_set(swigCPtr, value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        ushort ret = RTShaderPINVOKE.HardwareSkinning_SkinningData_maxWeightCount_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public SkinningType skinningType {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_skinningType_set(swigCPtr, (int)value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SkinningType ret = (SkinningType)RTShaderPINVOKE.HardwareSkinning_SkinningData_skinningType_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool correctAntipodalityHandling {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_correctAntipodalityHandling_set(swigCPtr, value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = RTShaderPINVOKE.HardwareSkinning_SkinningData_correctAntipodalityHandling_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public bool scalingShearingSupport {
      set {
        RTShaderPINVOKE.HardwareSkinning_SkinningData_scalingShearingSupport_set(swigCPtr, value);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        bool ret = RTShaderPINVOKE.HardwareSkinning_SkinningData_scalingShearingSupport_get(swigCPtr);
        if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

  public HardwareSkinning() : this(RTShaderPINVOKE.new_HardwareSkinning(), true) {
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string getType() {
    string ret = RTShaderPINVOKE.HardwareSkinning_getType(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getExecutionOrder() {
    int ret = RTShaderPINVOKE.HardwareSkinning_getExecutionOrder(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void copyFrom(SubRenderState rhs) {
    RTShaderPINVOKE.HardwareSkinning_copyFrom(swigCPtr, SubRenderState.getCPtr(rhs));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareSkinningParam(ushort boneCount, ushort weightCount, SkinningType skinningType, bool correctAntipodalityHandling, bool scalingShearingSupport) {
    RTShaderPINVOKE.HardwareSkinning_setHardwareSkinningParam__SWIG_0(swigCPtr, boneCount, weightCount, (int)skinningType, correctAntipodalityHandling, scalingShearingSupport);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareSkinningParam(ushort boneCount, ushort weightCount, SkinningType skinningType, bool correctAntipodalityHandling) {
    RTShaderPINVOKE.HardwareSkinning_setHardwareSkinningParam__SWIG_1(swigCPtr, boneCount, weightCount, (int)skinningType, correctAntipodalityHandling);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareSkinningParam(ushort boneCount, ushort weightCount, SkinningType skinningType) {
    RTShaderPINVOKE.HardwareSkinning_setHardwareSkinningParam__SWIG_2(swigCPtr, boneCount, weightCount, (int)skinningType);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setHardwareSkinningParam(ushort boneCount, ushort weightCount) {
    RTShaderPINVOKE.HardwareSkinning_setHardwareSkinningParam__SWIG_3(swigCPtr, boneCount, weightCount);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getBoneCount() {
    ushort ret = RTShaderPINVOKE.HardwareSkinning_getBoneCount(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort getWeightCount() {
    ushort ret = RTShaderPINVOKE.HardwareSkinning_getWeightCount(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SkinningType getSkinningType() {
    SkinningType ret = (SkinningType)RTShaderPINVOKE.HardwareSkinning_getSkinningType(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasCorrectAntipodalityHandling() {
    bool ret = RTShaderPINVOKE.HardwareSkinning_hasCorrectAntipodalityHandling(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasScalingShearingSupport() {
    bool ret = RTShaderPINVOKE.HardwareSkinning_hasScalingShearingSupport(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    bool ret = RTShaderPINVOKE.HardwareSkinning_preAddToRenderState(swigCPtr, RenderState.getCPtr(renderState), Pass.getCPtr(srcPass), Pass.getCPtr(dstPass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _setCreator(HardwareSkinningFactory pCreator) {
    RTShaderPINVOKE.HardwareSkinning__setCreator(swigCPtr, HardwareSkinningFactory.getCPtr(pCreator));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string Type {
    set {
      RTShaderPINVOKE.HardwareSkinning_Type_set(value);
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = RTShaderPINVOKE.HardwareSkinning_Type_get();
      if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
