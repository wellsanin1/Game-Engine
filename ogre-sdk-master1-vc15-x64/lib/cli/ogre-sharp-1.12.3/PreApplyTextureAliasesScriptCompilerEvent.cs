//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class PreApplyTextureAliasesScriptCompilerEvent : ScriptCompilerEvent {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PreApplyTextureAliasesScriptCompilerEvent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PreApplyTextureAliasesScriptCompilerEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PreApplyTextureAliasesScriptCompilerEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_PreApplyTextureAliasesScriptCompilerEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Material mMaterial {
    set {
      OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_mMaterial_set(swigCPtr, Material.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_mMaterial_get(swigCPtr);
      Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NameValuePairList mAliases {
    set {
      OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_mAliases_set(swigCPtr, NameValuePairList.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_mAliases_get(swigCPtr);
      NameValuePairList ret = (cPtr == global::System.IntPtr.Zero) ? null : new NameValuePairList(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string eventType {
    set {
      OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_eventType_set(value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.PreApplyTextureAliasesScriptCompilerEvent_eventType_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PreApplyTextureAliasesScriptCompilerEvent(Material material, NameValuePairList aliases) : this(OgrePINVOKE.new_PreApplyTextureAliasesScriptCompilerEvent(Material.getCPtr(material), NameValuePairList.getCPtr(aliases)), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
