//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ScriptCompiler : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptCompiler(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptCompiler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ScriptCompiler() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ScriptCompiler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static string formatErrorCode(uint code) {
    string ret = OgrePINVOKE.ScriptCompiler_formatErrorCode(code);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ScriptCompiler() : this(OgrePINVOKE.new_ScriptCompiler(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool compile(string str, string source, string group) {
    bool ret = OgrePINVOKE.ScriptCompiler_compile__SWIG_0(swigCPtr, str, source, group);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool compile(SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__ConcreteNode_t_t_t nodes, string group) {
    bool ret = OgrePINVOKE.ScriptCompiler_compile__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__ConcreteNode_t_t_t.getCPtr(nodes), group);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t _generateAST(string str, string source, bool doImports, bool doObjects, bool doVariables) {
    SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t(OgrePINVOKE.ScriptCompiler__generateAST__SWIG_0(swigCPtr, str, source, doImports, doObjects, doVariables), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t _generateAST(string str, string source, bool doImports, bool doObjects) {
    SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t(OgrePINVOKE.ScriptCompiler__generateAST__SWIG_1(swigCPtr, str, source, doImports, doObjects), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t _generateAST(string str, string source, bool doImports) {
    SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t(OgrePINVOKE.ScriptCompiler__generateAST__SWIG_2(swigCPtr, str, source, doImports), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t _generateAST(string str, string source) {
    SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t ret = new SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t(OgrePINVOKE.ScriptCompiler__generateAST__SWIG_3(swigCPtr, str, source), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _compile(SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t nodes, string group, bool doImports, bool doObjects, bool doVariables) {
    bool ret = OgrePINVOKE.ScriptCompiler__compile__SWIG_0(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t.getCPtr(nodes), group, doImports, doObjects, doVariables);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _compile(SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t nodes, string group, bool doImports, bool doObjects) {
    bool ret = OgrePINVOKE.ScriptCompiler__compile__SWIG_1(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t.getCPtr(nodes), group, doImports, doObjects);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _compile(SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t nodes, string group, bool doImports) {
    bool ret = OgrePINVOKE.ScriptCompiler__compile__SWIG_2(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t.getCPtr(nodes), group, doImports);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _compile(SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t nodes, string group) {
    bool ret = OgrePINVOKE.ScriptCompiler__compile__SWIG_3(swigCPtr, SWIGTYPE_p_Ogre__SharedPtrT_std__listT_Ogre__SharedPtrT_Ogre__AbstractNode_t_t_t.getCPtr(nodes), group);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addError(uint code, string file, int line, string msg) {
    OgrePINVOKE.ScriptCompiler_addError__SWIG_0(swigCPtr, code, file, line, msg);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addError(uint code, string file, int line) {
    OgrePINVOKE.ScriptCompiler_addError__SWIG_1(swigCPtr, code, file, line);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setListener(ScriptCompilerListener listener) {
    OgrePINVOKE.ScriptCompiler_setListener(swigCPtr, ScriptCompilerListener.getCPtr(listener));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ScriptCompilerListener getListener() {
    global::System.IntPtr cPtr = OgrePINVOKE.ScriptCompiler_getListener(swigCPtr);
    ScriptCompilerListener ret = (cPtr == global::System.IntPtr.Zero) ? null : new ScriptCompilerListener(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getResourceGroup() {
    string ret = OgrePINVOKE.ScriptCompiler_getResourceGroup(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool _fireEvent(ScriptCompilerEvent evt, SWIGTYPE_p_void retval) {
    bool ret = OgrePINVOKE.ScriptCompiler__fireEvent(swigCPtr, ScriptCompilerEvent.getCPtr(evt), SWIGTYPE_p_void.getCPtr(retval));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint registerCustomWordId(string word) {
    uint ret = OgrePINVOKE.ScriptCompiler_registerCustomWordId(swigCPtr, word);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int CE_STRINGEXPECTED = OgrePINVOKE.ScriptCompiler_CE_STRINGEXPECTED_get();
  public static readonly int CE_NUMBEREXPECTED = OgrePINVOKE.ScriptCompiler_CE_NUMBEREXPECTED_get();
  public static readonly int CE_FEWERPARAMETERSEXPECTED = OgrePINVOKE.ScriptCompiler_CE_FEWERPARAMETERSEXPECTED_get();
  public static readonly int CE_VARIABLEEXPECTED = OgrePINVOKE.ScriptCompiler_CE_VARIABLEEXPECTED_get();
  public static readonly int CE_UNDEFINEDVARIABLE = OgrePINVOKE.ScriptCompiler_CE_UNDEFINEDVARIABLE_get();
  public static readonly int CE_OBJECTNAMEEXPECTED = OgrePINVOKE.ScriptCompiler_CE_OBJECTNAMEEXPECTED_get();
  public static readonly int CE_OBJECTALLOCATIONERROR = OgrePINVOKE.ScriptCompiler_CE_OBJECTALLOCATIONERROR_get();
  public static readonly int CE_INVALIDPARAMETERS = OgrePINVOKE.ScriptCompiler_CE_INVALIDPARAMETERS_get();
  public static readonly int CE_DUPLICATEOVERRIDE = OgrePINVOKE.ScriptCompiler_CE_DUPLICATEOVERRIDE_get();
  public static readonly int CE_UNEXPECTEDTOKEN = OgrePINVOKE.ScriptCompiler_CE_UNEXPECTEDTOKEN_get();
  public static readonly int CE_OBJECTBASENOTFOUND = OgrePINVOKE.ScriptCompiler_CE_OBJECTBASENOTFOUND_get();
  public static readonly int CE_REFERENCETOANONEXISTINGOBJECT = OgrePINVOKE.ScriptCompiler_CE_REFERENCETOANONEXISTINGOBJECT_get();
  public static readonly int CE_DEPRECATEDSYMBOL = OgrePINVOKE.ScriptCompiler_CE_DEPRECATEDSYMBOL_get();

  public static readonly int ID_ON = OgrePINVOKE.ScriptCompiler_ID_ON_get();
  public static readonly int ID_OFF = OgrePINVOKE.ScriptCompiler_ID_OFF_get();
  public static readonly int ID_TRUE = OgrePINVOKE.ScriptCompiler_ID_TRUE_get();
  public static readonly int ID_FALSE = OgrePINVOKE.ScriptCompiler_ID_FALSE_get();
  public static readonly int ID_YES = OgrePINVOKE.ScriptCompiler_ID_YES_get();
  public static readonly int ID_NO = OgrePINVOKE.ScriptCompiler_ID_NO_get();

}

}
