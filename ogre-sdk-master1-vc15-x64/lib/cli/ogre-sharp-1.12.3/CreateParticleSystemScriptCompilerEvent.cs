//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class CreateParticleSystemScriptCompilerEvent : ScriptCompilerEvent {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CreateParticleSystemScriptCompilerEvent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CreateParticleSystemScriptCompilerEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CreateParticleSystemScriptCompilerEvent() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_CreateParticleSystemScriptCompilerEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public string mFile {
    set {
      OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mFile_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mFile_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string mName {
    set {
      OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mName_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mName_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string mResourceGroup {
    set {
      OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mResourceGroup_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_mResourceGroup_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string eventType {
    set {
      OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_eventType_set(value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.CreateParticleSystemScriptCompilerEvent_eventType_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CreateParticleSystemScriptCompilerEvent(string file, string name, string resourceGroup) : this(OgrePINVOKE.new_CreateParticleSystemScriptCompilerEvent(file, name, resourceGroup), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
