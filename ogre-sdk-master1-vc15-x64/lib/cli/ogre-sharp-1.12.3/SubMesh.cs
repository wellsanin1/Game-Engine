//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SubMesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SubMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubMesh() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_SubMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SubMesh() : this(OgrePINVOKE.new_SubMesh(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool useSharedVertices {
    set {
      OgrePINVOKE.SubMesh_useSharedVertices_set(swigCPtr, value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = OgrePINVOKE.SubMesh_useSharedVertices_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RenderOperation.OperationType operationType {
    set {
      OgrePINVOKE.SubMesh_operationType_set(swigCPtr, (int)value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      RenderOperation.OperationType ret = (RenderOperation.OperationType)OgrePINVOKE.SubMesh_operationType_get(swigCPtr);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public VertexData vertexData {
    set {
      OgrePINVOKE.SubMesh_vertexData_set(swigCPtr, VertexData.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_vertexData_get(swigCPtr);
      VertexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new VertexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public IndexData indexData {
    set {
      OgrePINVOKE.SubMesh_indexData_set(swigCPtr, IndexData.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_indexData_get(swigCPtr);
      IndexData ret = (cPtr == global::System.IntPtr.Zero) ? null : new IndexData(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_unsigned_short_t blendIndexToBoneIndexMap {
    set {
      OgrePINVOKE.SubMesh_blendIndexToBoneIndexMap_set(swigCPtr, SWIGTYPE_p_std__vectorT_unsigned_short_t.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_blendIndexToBoneIndexMap_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_unsigned_short_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_unsigned_short_t(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Ogre__IndexData_p_t mLodFaceList {
    set {
      OgrePINVOKE.SubMesh_mLodFaceList_set(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__IndexData_p_t.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_mLodFaceList_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Ogre__IndexData_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__IndexData_p_t(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_Ogre__VectorT_3_Ogre__Real_t_t extremityPoints {
    set {
      OgrePINVOKE.SubMesh_extremityPoints_set(swigCPtr, SWIGTYPE_p_std__vectorT_Ogre__VectorT_3_Ogre__Real_t_t.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_extremityPoints_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_Ogre__VectorT_3_Ogre__Real_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_Ogre__VectorT_3_Ogre__Real_t_t(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Mesh parent {
    set {
      OgrePINVOKE.SubMesh_parent_set(swigCPtr, Mesh.getCPtr(value));
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_parent_get(swigCPtr);
      Mesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mesh(cPtr, false);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void setMaterialName(string matName, string groupName) {
    OgrePINVOKE.SubMesh_setMaterialName__SWIG_0(swigCPtr, matName, groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMaterialName(string matName) {
    OgrePINVOKE.SubMesh_setMaterialName__SWIG_1(swigCPtr, matName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMaterialName() {
    string ret = OgrePINVOKE.SubMesh_getMaterialName(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaterial(MaterialPtr mat) {
    OgrePINVOKE.SubMesh_setMaterial(swigCPtr, MaterialPtr.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.SubMesh_getMaterial(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isMatInitialised() {
    bool ret = OgrePINVOKE.SubMesh_isMatInitialised(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _getRenderOperation(RenderOperation rend, ushort lodIndex) {
    OgrePINVOKE.SubMesh__getRenderOperation__SWIG_0(swigCPtr, RenderOperation.getCPtr(rend), lodIndex);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _getRenderOperation(RenderOperation rend) {
    OgrePINVOKE.SubMesh__getRenderOperation__SWIG_1(swigCPtr, RenderOperation.getCPtr(rend));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addBoneAssignment(VertexBoneAssignment vertBoneAssign) {
    OgrePINVOKE.SubMesh_addBoneAssignment(swigCPtr, VertexBoneAssignment.getCPtr(vertBoneAssign));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearBoneAssignments() {
    OgrePINVOKE.SubMesh_clearBoneAssignments(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t_t getBoneAssignmentIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t_t(OgrePINVOKE.SubMesh_getBoneAssignmentIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t getBoneAssignments() {
    SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t ret = new SWIGTYPE_p_std__multimapT_size_t_Ogre__VertexBoneAssignment_s_t(OgrePINVOKE.SubMesh_getBoneAssignments(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _compileBoneAssignments() {
    OgrePINVOKE.SubMesh__compileBoneAssignments(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__ConstMapIteratorT_std__mapT_Ogre__String_Ogre__String_std__lessT_Ogre__String_t_t_t getAliasTextureIterator() {
    SWIGTYPE_p_Ogre__ConstMapIteratorT_std__mapT_Ogre__String_Ogre__String_std__lessT_Ogre__String_t_t_t ret = new SWIGTYPE_p_Ogre__ConstMapIteratorT_std__mapT_Ogre__String_Ogre__String_std__lessT_Ogre__String_t_t_t(OgrePINVOKE.SubMesh_getAliasTextureIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addTextureAlias(string aliasName, string textureName) {
    OgrePINVOKE.SubMesh_addTextureAlias(swigCPtr, aliasName, textureName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeTextureAlias(string aliasName) {
    OgrePINVOKE.SubMesh_removeTextureAlias(swigCPtr, aliasName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllTextureAliases() {
    OgrePINVOKE.SubMesh_removeAllTextureAliases(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasTextureAliases() {
    bool ret = OgrePINVOKE.SubMesh_hasTextureAliases(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getTextureAliasCount() {
    uint ret = OgrePINVOKE.SubMesh_getTextureAliasCount(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool updateMaterialUsingTextureAliases() {
    bool ret = OgrePINVOKE.SubMesh_updateMaterialUsingTextureAliases(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VertexAnimationType getVertexAnimationType() {
    VertexAnimationType ret = (VertexAnimationType)OgrePINVOKE.SubMesh_getVertexAnimationType(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getVertexAnimationIncludesNormals() {
    bool ret = OgrePINVOKE.SubMesh_getVertexAnimationIncludesNormals(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void generateExtremes(uint count) {
    OgrePINVOKE.SubMesh_generateExtremes(swigCPtr, count);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isBuildEdgesEnabled() {
    bool ret = OgrePINVOKE.SubMesh_isBuildEdgesEnabled(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setBuildEdgesEnabled(bool b) {
    OgrePINVOKE.SubMesh_setBuildEdgesEnabled(swigCPtr, b);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SubMesh clone(string newName, Mesh parentMesh) {
    global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_clone__SWIG_0(swigCPtr, newName, Mesh.getCPtr(parentMesh));
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubMesh clone(string newName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SubMesh_clone__SWIG_1(swigCPtr, newName);
    SubMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubMesh(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
