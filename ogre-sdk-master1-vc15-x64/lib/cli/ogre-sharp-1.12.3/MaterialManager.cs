//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class MaterialManager : ResourceManager {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MaterialManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.MaterialManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MaterialManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MaterialManager() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_MaterialManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static string DEFAULT_SCHEME_NAME {
    set {
      OgrePINVOKE.MaterialManager_DEFAULT_SCHEME_NAME_set(value);
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = OgrePINVOKE.MaterialManager_DEFAULT_SCHEME_NAME_get();
      if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MaterialPtr create(string name, string group, bool isManual, ManualResourceLoader loader, NameValuePairList createParams) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_0(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader), NameValuePairList.getCPtr(createParams)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group, bool isManual, ManualResourceLoader loader) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_1(swigCPtr, name, group, isManual, ManualResourceLoader.getCPtr(loader)), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group, bool isManual) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_2(swigCPtr, name, group, isManual), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr create(string name, string group) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_create__SWIG_3(swigCPtr, name, group), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getByName(string name, string groupName) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getByName__SWIG_0(swigCPtr, name, groupName), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getByName(string name) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getByName__SWIG_1(swigCPtr, name), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getDefaultMaterial(bool useLighting) {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultMaterial__SWIG_0(swigCPtr, useLighting), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getDefaultMaterial() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultMaterial__SWIG_1(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialManager() : this(OgrePINVOKE.new_MaterialManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void initialise() {
    OgrePINVOKE.MaterialManager_initialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void parseScript(DataStreamPtr stream, string groupName) {
    OgrePINVOKE.MaterialManager_parseScript(swigCPtr, DataStreamPtr.getCPtr(stream), groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(TextureFilterOptions fo) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_0(swigCPtr, (int)fo);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(FilterType ftype, FilterOptions opts) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_1(swigCPtr, (int)ftype, (int)opts);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDefaultTextureFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgrePINVOKE.MaterialManager_setDefaultTextureFiltering__SWIG_2(swigCPtr, (int)minFilter, (int)magFilter, (int)mipFilter);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual FilterOptions getDefaultTextureFiltering(FilterType ftype) {
    FilterOptions ret = (FilterOptions)OgrePINVOKE.MaterialManager_getDefaultTextureFiltering(swigCPtr, (int)ftype);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDefaultAnisotropy(uint maxAniso) {
    OgrePINVOKE.MaterialManager_setDefaultAnisotropy(swigCPtr, maxAniso);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getDefaultAnisotropy() {
    uint ret = OgrePINVOKE.MaterialManager_getDefaultAnisotropy(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual MaterialPtr getDefaultSettings() {
    MaterialPtr ret = new MaterialPtr(OgrePINVOKE.MaterialManager_getDefaultSettings(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort _getSchemeIndex(string name) {
    ushort ret = OgrePINVOKE.MaterialManager__getSchemeIndex(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string _getSchemeName(ushort index) {
    string ret = OgrePINVOKE.MaterialManager__getSchemeName(swigCPtr, index);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ushort _getActiveSchemeIndex() {
    ushort ret = OgrePINVOKE.MaterialManager__getActiveSchemeIndex(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual string getActiveScheme() {
    string ret = OgrePINVOKE.MaterialManager_getActiveScheme(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setActiveScheme(string schemeName) {
    OgrePINVOKE.MaterialManager_setActiveScheme(swigCPtr, schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addListener(MaterialManager_Listener l, string schemeName) {
    OgrePINVOKE.MaterialManager_addListener__SWIG_0(swigCPtr, MaterialManager_Listener.getCPtr(l), schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void addListener(MaterialManager_Listener l) {
    OgrePINVOKE.MaterialManager_addListener__SWIG_1(swigCPtr, MaterialManager_Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(MaterialManager_Listener l, string schemeName) {
    OgrePINVOKE.MaterialManager_removeListener__SWIG_0(swigCPtr, MaterialManager_Listener.getCPtr(l), schemeName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void removeListener(MaterialManager_Listener l) {
    OgrePINVOKE.MaterialManager_removeListener__SWIG_1(swigCPtr, MaterialManager_Listener.getCPtr(l));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Technique _arbitrateMissingTechniqueForActiveScheme(Material mat, ushort lodIndex, Renderable rend) {
    global::System.IntPtr cPtr = OgrePINVOKE.MaterialManager__arbitrateMissingTechniqueForActiveScheme(swigCPtr, Material.getCPtr(mat), lodIndex, Renderable.getCPtr(rend));
    Technique ret = (cPtr == global::System.IntPtr.Zero) ? null : new Technique(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void _notifyAfterIlluminationPassesCreated(Technique mat) {
    OgrePINVOKE.MaterialManager__notifyAfterIlluminationPassesCreated(swigCPtr, Technique.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _notifyBeforeIlluminationPassesCleared(Technique mat) {
    OgrePINVOKE.MaterialManager__notifyBeforeIlluminationPassesCleared(swigCPtr, Technique.getCPtr(mat));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static MaterialManager getSingleton() {
    MaterialManager ret = new MaterialManager(OgrePINVOKE.MaterialManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
