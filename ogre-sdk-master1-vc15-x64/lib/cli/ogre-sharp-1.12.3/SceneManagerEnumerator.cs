//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class SceneManagerEnumerator : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SceneManagerEnumerator(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SceneManagerEnumerator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SceneManagerEnumerator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_SceneManagerEnumerator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SceneManagerEnumerator() : this(OgrePINVOKE.new_SceneManagerEnumerator(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addFactory(SceneManagerFactory fact) {
    OgrePINVOKE.SceneManagerEnumerator_addFactory(swigCPtr, SceneManagerFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeFactory(SceneManagerFactory fact) {
    OgrePINVOKE.SceneManagerEnumerator_removeFactory(swigCPtr, SceneManagerFactory.getCPtr(fact));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManagerMetaData getMetaData(string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManagerEnumerator_getMetaData__SWIG_0(swigCPtr, typeName);
    SceneManagerMetaData ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManagerMetaData(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_Ogre__SceneManagerMetaData_const_p_t getMetaData() {
    SWIGTYPE_p_std__vectorT_Ogre__SceneManagerMetaData_const_p_t ret = new SWIGTYPE_p_std__vectorT_Ogre__SceneManagerMetaData_const_p_t(OgrePINVOKE.SceneManagerEnumerator_getMetaData__SWIG_1(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__ConstVectorIteratorT_std__vectorT_Ogre__SceneManagerMetaData_const_p_t_t getMetaDataIterator() {
    SWIGTYPE_p_Ogre__ConstVectorIteratorT_std__vectorT_Ogre__SceneManagerMetaData_const_p_t_t ret = new SWIGTYPE_p_Ogre__ConstVectorIteratorT_std__vectorT_Ogre__SceneManagerMetaData_const_p_t_t(OgrePINVOKE.SceneManagerEnumerator_getMetaDataIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager createSceneManager(string typeName, string instanceName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManagerEnumerator_createSceneManager__SWIG_0(swigCPtr, typeName, instanceName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneManager createSceneManager(string typeName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManagerEnumerator_createSceneManager__SWIG_1(swigCPtr, typeName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void destroySceneManager(SceneManager sm) {
    OgrePINVOKE.SceneManagerEnumerator_destroySceneManager(swigCPtr, SceneManager.getCPtr(sm));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SceneManager getSceneManager(string instanceName) {
    global::System.IntPtr cPtr = OgrePINVOKE.SceneManagerEnumerator_getSceneManager(swigCPtr, instanceName);
    SceneManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new SceneManager(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSceneManager(string instanceName) {
    bool ret = OgrePINVOKE.SceneManagerEnumerator_hasSceneManager(swigCPtr, instanceName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t_t getSceneManagerIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t_t(OgrePINVOKE.SceneManagerEnumerator_getSceneManagerIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t getSceneManagers() {
    SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t ret = new SWIGTYPE_p_std__mapT_std__string_Ogre__SceneManager_p_std__lessT_std__string_t_t(OgrePINVOKE.SceneManagerEnumerator_getSceneManagers(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRenderSystem(RenderSystem rs) {
    OgrePINVOKE.SceneManagerEnumerator_setRenderSystem(swigCPtr, RenderSystem.getCPtr(rs));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void shutdownAll() {
    OgrePINVOKE.SceneManagerEnumerator_shutdownAll(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SceneManagerEnumerator getSingleton() {
    SceneManagerEnumerator ret = new SceneManagerEnumerator(OgrePINVOKE.SceneManagerEnumerator_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
