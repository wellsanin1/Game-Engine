//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class ParticleSystemManager : ScriptLoader {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ParticleSystemManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(OgrePINVOKE.ParticleSystemManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ParticleSystemManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ParticleSystemManager() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgrePINVOKE.delete_ParticleSystemManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public ParticleSystemManager() : this(OgrePINVOKE.new_ParticleSystemManager(), true) {
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addEmitterFactory(ParticleEmitterFactory factory) {
    OgrePINVOKE.ParticleSystemManager_addEmitterFactory(swigCPtr, ParticleEmitterFactory.getCPtr(factory));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addAffectorFactory(ParticleAffectorFactory factory) {
    OgrePINVOKE.ParticleSystemManager_addAffectorFactory(swigCPtr, ParticleAffectorFactory.getCPtr(factory));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addRendererFactory(SWIGTYPE_p_Ogre__ParticleSystemRendererFactory factory) {
    OgrePINVOKE.ParticleSystemManager_addRendererFactory(swigCPtr, SWIGTYPE_p_Ogre__ParticleSystemRendererFactory.getCPtr(factory));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addTemplate(string name, ParticleSystem sysTemplate) {
    OgrePINVOKE.ParticleSystemManager_addTemplate(swigCPtr, name, ParticleSystem.getCPtr(sysTemplate));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeTemplate(string name, bool deleteTemplate) {
    OgrePINVOKE.ParticleSystemManager_removeTemplate__SWIG_0(swigCPtr, name, deleteTemplate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeTemplate(string name) {
    OgrePINVOKE.ParticleSystemManager_removeTemplate__SWIG_1(swigCPtr, name);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllTemplates(bool deleteTemplate) {
    OgrePINVOKE.ParticleSystemManager_removeAllTemplates__SWIG_0(swigCPtr, deleteTemplate);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeAllTemplates() {
    OgrePINVOKE.ParticleSystemManager_removeAllTemplates__SWIG_1(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void removeTemplatesByResourceGroup(string resourceGroup) {
    OgrePINVOKE.ParticleSystemManager_removeTemplatesByResourceGroup(swigCPtr, resourceGroup);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleSystem createTemplate(string name, string resourceGroup) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager_createTemplate(swigCPtr, name, resourceGroup);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystem getTemplate(string name) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager_getTemplate(swigCPtr, name);
    ParticleSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystem(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleEmitter _createEmitter(string emitterType, ParticleSystem psys) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager__createEmitter(swigCPtr, emitterType, ParticleSystem.getCPtr(psys));
    ParticleEmitter ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleEmitter(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _destroyEmitter(ParticleEmitter emitter) {
    OgrePINVOKE.ParticleSystemManager__destroyEmitter(swigCPtr, ParticleEmitter.getCPtr(emitter));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParticleAffector _createAffector(string affectorType, ParticleSystem psys) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager__createAffector(swigCPtr, affectorType, ParticleSystem.getCPtr(psys));
    ParticleAffector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleAffector(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _destroyAffector(ParticleAffector affector) {
    OgrePINVOKE.ParticleSystemManager__destroyAffector(swigCPtr, ParticleAffector.getCPtr(affector));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Ogre__ParticleSystemRenderer _createRenderer(string rendererType) {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager__createRenderer(swigCPtr, rendererType);
    SWIGTYPE_p_Ogre__ParticleSystemRenderer ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Ogre__ParticleSystemRenderer(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void _destroyRenderer(SWIGTYPE_p_Ogre__ParticleSystemRenderer renderer) {
    OgrePINVOKE.ParticleSystemManager__destroyRenderer(swigCPtr, SWIGTYPE_p_Ogre__ParticleSystemRenderer.getCPtr(renderer));
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _initialise() {
    OgrePINVOKE.ParticleSystemManager__initialise(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override StringVector getScriptPatterns() {
    StringVector ret = new StringVector(OgrePINVOKE.ParticleSystemManager_getScriptPatterns(swigCPtr), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void parseScript(DataStreamPtr stream, string groupName) {
    OgrePINVOKE.ParticleSystemManager_parseScript(swigCPtr, DataStreamPtr.getCPtr(stream), groupName);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
  }

  public override float getLoadingOrder() {
    float ret = OgrePINVOKE.ParticleSystemManager_getLoadingOrder(swigCPtr);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleAffectorFactory_p_std__lessT_std__string_t_t_t getAffectorFactoryIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleAffectorFactory_p_std__lessT_std__string_t_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleAffectorFactory_p_std__lessT_std__string_t_t_t(OgrePINVOKE.ParticleSystemManager_getAffectorFactoryIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleEmitterFactory_p_std__lessT_std__string_t_t_t getEmitterFactoryIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleEmitterFactory_p_std__lessT_std__string_t_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleEmitterFactory_p_std__lessT_std__string_t_t_t(OgrePINVOKE.ParticleSystemManager_getEmitterFactoryIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystemRendererFactory_p_std__lessT_std__string_t_t_t getRendererFactoryIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystemRendererFactory_p_std__lessT_std__string_t_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystemRendererFactory_p_std__lessT_std__string_t_t_t(OgrePINVOKE.ParticleSystemManager_getRendererFactoryIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystem_p_std__lessT_std__string_t_t_t getTemplateIterator() {
    SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystem_p_std__lessT_std__string_t_t_t ret = new SWIGTYPE_p_Ogre__MapIteratorT_std__mapT_std__string_Ogre__ParticleSystem_p_std__lessT_std__string_t_t_t(OgrePINVOKE.ParticleSystemManager_getTemplateIterator(swigCPtr), true);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ParticleSystemFactory _getFactory() {
    global::System.IntPtr cPtr = OgrePINVOKE.ParticleSystemManager__getFactory(swigCPtr);
    ParticleSystemFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ParticleSystemFactory(cPtr, false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ParticleSystemManager getSingleton() {
    ParticleSystemManager ret = new ParticleSystemManager(OgrePINVOKE.ParticleSystemManager_getSingleton(), false);
    if (OgrePINVOKE.SWIGPendingException.Pending) throw OgrePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
