//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace org.ogre {

public class HardwareSkinningFactory : SubRenderStateFactory {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal HardwareSkinningFactory(global::System.IntPtr cPtr, bool cMemoryOwn) : base(RTShaderPINVOKE.HardwareSkinningFactory_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(HardwareSkinningFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~HardwareSkinningFactory() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RTShaderPINVOKE.delete_HardwareSkinningFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public HardwareSkinningFactory() : this(RTShaderPINVOKE.new_HardwareSkinningFactory(), true) {
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string getType() {
    string ret = RTShaderPINVOKE.HardwareSkinningFactory_getType(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SubRenderState createInstance(ScriptCompiler compiler, PropertyAbstractNode prop, Pass pass, SGScriptTranslator translator) {
    global::System.IntPtr cPtr = RTShaderPINVOKE.HardwareSkinningFactory_createInstance(swigCPtr, ScriptCompiler.getCPtr(compiler), PropertyAbstractNode.getCPtr(prop), Pass.getCPtr(pass), SGScriptTranslator.getCPtr(translator));
    SubRenderState ret = (cPtr == global::System.IntPtr.Zero) ? null : new SubRenderState(cPtr, false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void writeInstance(MaterialSerializer ser, SubRenderState subRenderState, Pass srcPass, Pass dstPass) {
    RTShaderPINVOKE.HardwareSkinningFactory_writeInstance(swigCPtr, MaterialSerializer.getCPtr(ser), SubRenderState.getCPtr(subRenderState), Pass.getCPtr(srcPass), Pass.getCPtr(dstPass));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setCustomShadowCasterMaterials(SkinningType skinningType, MaterialPtr caster1Weight, MaterialPtr caster2Weight, MaterialPtr caster3Weight, MaterialPtr caster4Weight) {
    RTShaderPINVOKE.HardwareSkinningFactory_setCustomShadowCasterMaterials(swigCPtr, (int)skinningType, MaterialPtr.getCPtr(caster1Weight), MaterialPtr.getCPtr(caster2Weight), MaterialPtr.getCPtr(caster3Weight), MaterialPtr.getCPtr(caster4Weight));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setCustomShadowReceiverMaterials(SkinningType skinningType, MaterialPtr receiver1Weight, MaterialPtr receiver2Weight, MaterialPtr receiver3Weight, MaterialPtr receiver4Weight) {
    RTShaderPINVOKE.HardwareSkinningFactory_setCustomShadowReceiverMaterials(swigCPtr, (int)skinningType, MaterialPtr.getCPtr(receiver1Weight), MaterialPtr.getCPtr(receiver2Weight), MaterialPtr.getCPtr(receiver3Weight), MaterialPtr.getCPtr(receiver4Weight));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public MaterialPtr getCustomShadowCasterMaterial(SkinningType skinningType, ushort index) {
    MaterialPtr ret = new MaterialPtr(RTShaderPINVOKE.HardwareSkinningFactory_getCustomShadowCasterMaterial(swigCPtr, (int)skinningType, index), false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MaterialPtr getCustomShadowReceiverMaterial(SkinningType skinningType, ushort index) {
    MaterialPtr ret = new MaterialPtr(RTShaderPINVOKE.HardwareSkinningFactory_getCustomShadowReceiverMaterial(swigCPtr, (int)skinningType, index), false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType, bool correctAntidpodalityHandling, bool shearScale) {
    RTShaderPINVOKE.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_0(swigCPtr, Entity.getCPtr(pEntity), (int)skinningType, correctAntidpodalityHandling, shearScale);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType, bool correctAntidpodalityHandling) {
    RTShaderPINVOKE.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_1(swigCPtr, Entity.getCPtr(pEntity), (int)skinningType, correctAntidpodalityHandling);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepareEntityForSkinning(Entity pEntity, SkinningType skinningType) {
    RTShaderPINVOKE.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_2(swigCPtr, Entity.getCPtr(pEntity), (int)skinningType);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepareEntityForSkinning(Entity pEntity) {
    RTShaderPINVOKE.HardwareSkinningFactory_prepareEntityForSkinning__SWIG_3(swigCPtr, Entity.getCPtr(pEntity));
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort getMaxCalculableBoneCount() {
    ushort ret = RTShaderPINVOKE.HardwareSkinningFactory_getMaxCalculableBoneCount(swigCPtr);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMaxCalculableBoneCount(ushort count) {
    RTShaderPINVOKE.HardwareSkinningFactory_setMaxCalculableBoneCount(swigCPtr, count);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
  }

  public static HardwareSkinningFactory getSingleton() {
    HardwareSkinningFactory ret = new HardwareSkinningFactory(RTShaderPINVOKE.HardwareSkinningFactory_getSingleton(), false);
    if (RTShaderPINVOKE.SWIGPendingException.Pending) throw RTShaderPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
